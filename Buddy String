class Solution {
public:
    bool buddyStrings(string A, string B) {
        // check all string A and string B: 
        // if they are the same but have 2 character is the same then it is pass. 
        // if string A and B different --> but must be the same letter --> can swap. 
        // edge case: A, B <2 then false. 
        // solution: 
        // to store the same letter then if equal then remove --> can use stack. 
        // the first case: if they are the same position and a letter have two position then it also work. 
        // one pass: check all the position and save the different, then check the different. 
        // use hashmap to check this case. 
        unordered_map<char, int> hashmap; // store char and index 
        vector<char> Adiff; 
        vector<char> Bdiff; 
        
        // check if string A and string B how much different then store it 
        if (A.length() <2 || B.length()<2 || A.length() != B.length())
            return false; 
        for (int i =0; i< A.length(); i++)
        {
            if (A[i] == B[i])
                hashmap[A[i]]++; // at hashmap key A[i] increase value by one. // init value =0. 
            else 
            {
                Adiff.push_back(A[i]);
                Bdiff.push_back(B[i]);
            }
        }
        if (Adiff.size() ==0)
        {
            for (auto i :  hashmap ){
                if (i.second >=2)
                    return true; 
            }                
            return false; 
        } else 
        {
            if (Adiff.size() ==2)
            {
                if (Adiff[0] == Bdiff[1] && Adiff[1] == Bdiff[0])
                    return true; 
                else 
                    return false; 
            }
            return false; 
        }
                
        return false;    
    }
};
