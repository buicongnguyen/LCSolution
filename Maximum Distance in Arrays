/*
You are given m arrays, where each array is sorted in ascending order. Now you can pick up two integers from two different arrays (each array picks one) and calculate the distance. We define the distance between two integers a and b to be their absolute difference |a - b|. Your task is to find the maximum distance.

 

Example 1:

Input: arrays = [[1,2,3],[4,5],[1,2,3]]
Output: 4
Explanation: One way to reach the maximum distance 4 is to pick 1 in the first or third array and pick 5 in the second array.
Example 2:

Input: arrays = [[1],[1]]
Output: 0
Example 3:

Input: arrays = [[1],[2]]
Output: 1
Example 4:

Input: arrays = [[1,4],[0,5]]
Output: 4

Constraints:

m == arrays.length
2 <= m <= 10^4
1 <= arrays[i].length <= 500
-10^4 <= arrays[i][j] <= 10^4
arrays[i] is sorted in ascending order.
There will be at most 105 integers in all the arrays.
*/

// Brute force: compare all value and in all range
// optimize 1: compare all [0] and .back element together 
// optimize 2: update max range and max_val, min_val for each new element. 

class Solution {
public:
    int maxDistance(vector<vector<int>>& arrays) {
        // interval, dynamic programming: max so far. 
        int res =0, min_val = arrays[0][0], max_val = arrays[0].back();
        for (int i = 1; i< arrays.size(); i++)
        {
            // add each component then check it with current max, min value and update max distance. 
            int temp = std::max(abs(arrays[i].back() - min_val), 
                          abs(max_val - arrays[i][0])); 
            res = std::max(res, temp);
            // res = max(res, abs(arrays[i].back() - min_val), 
            //                abs(max_val - arrays[i][0])); 
            min_val = std::min(min_val, arrays[i][0]);
            max_val = std::max(max_val, arrays[i][arrays[i].size() -1]);
        }
        return res; 
    }
};



