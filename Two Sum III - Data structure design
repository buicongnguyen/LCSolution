/*
Design a data structure that accepts a stream of integers and checks if it has a pair of integers that sum up to a particular value.

Implement the TwoSum class:

TwoSum() Initializes the TwoSum object, with an empty array initially.
void add(int number) Adds number to the data structure.
boolean find(int value) Returns true if there exists any pair of numbers whose sum is equal to value, otherwise, it returns false.
*/

class TwoSum {
public:
    /** Initialize your data structure here. */
    //unordered_set<int> dataSet;
    vector<int> nums; 
    TwoSum() {
        // I will clear unordered set to null 
        //dataSet.clear(); 
        //nums.clear(); 
    }
    
    /** Add the number to an internal data structure.. */
    void add(int number) {
        // I will add the number to the hashmap 
        // Complexity is O(1);
        //dataSet.insert(number);
        nums.push_back(number);
    }
    
    /** Find if there exists any pair of numbers which sum is equal to the value. */
    bool find(int value) {
        // I will use find in hash map the value: by one loop O(n)
        // check if sum - value exist or not. 
        // edge case: 
        //if (dataSet[0] == value)
        unordered_set<int> dataSet;
        for (int i =0; i<nums.size();++i)
        {            
            if (dataSet.find((long int)value - (long int)nums[i] ) != dataSet.end())
                return true; 
            else 
                dataSet.insert(nums[i]);
        }
        return false; 
    }
};

/**
 * Your TwoSum object will be instantiated and called as such:
 * TwoSum* obj = new TwoSum();
 * obj->add(number);
 * bool param_2 = obj->find(value);
 */
 
 
 //////////// Use unordered_map: 
 class TwoSum {
public:
    /** Initialize your data structure here. */
    unordered_map<int,int> m; // first: value, second : index
    TwoSum() {
        
    }
    
    /** Add the number to an internal data structure.. */
    void add(int number) {
        m[number]++;
    }
    
    /** Find if there exists any pair of numbers which sum is equal to the value. */
    bool find(int value) {
        for(auto i=m.begin(); i!=m.end(); i++){  // i : m.first 
            int tmp = value - (i->first);
            auto find = m.find(tmp);
            if(find != m.end()){
                if(find == i && find->second == 1)continue;
                else return true;
            }
        }
        return false;
    }
};


/////////// very fast: 

class TwoSum {
public:
    unordered_map<int,int> mp;
    vector<int> v;
    int size=0;
    int max1 = 0;
    int max2 = 0;
    int small1 = 0;
    int small2 = 0;
    // Add the number to an internal data structure.
	void add(int number) {
            // Add the number to the vector
	    v.push_back(number);
	    size++;
            // Increase the count of the number in the map.
	    mp[number]++;

            // See if the number is greater than any of the two maximum values. If it is, change them accordingly.
	    if(number > max1)
	    {
	        max2 = max1;
	        max1 = number;
	    }
	    else if(number > max2)
	    {
	        max2 = number;
	    }

            // See if the number is smaller than any of the two smallest values. If it is, change the small1 and small2 variables accordingly.
	    if(number < small1)
	    {
	        small2 = small1;
	        small1 = number;
	    }
	    else if(number < small2)
	    {
	        small2 = number;
	    }
	}

    // Find if there exists any pair of numbers which sum is equal to the value.
	bool find(int value) {
            // If the value is greater than the maximum value achievable, return false
	    if(value > (max1+max2))
	    {
	        return false;
	    }
            // If the value is smaller than the minimum value achievable, return false
	    if(value < (small1+small2))
	    {
	        return false;
	    }
	    for(int i =0;i<size;i++)
	    {
	        if(value - v[i] == v[i])
	        {
	            if(mp[v[i]] >= 2) // if found more than 1 the same number. 
	            {
	                return true;
	            }
	        }
	        else
	        {
	            if(mp.find(value-v[i]) != mp.end() && mp[value-v[i]] >= 1)
	            {
	                return true;
	            }
	        }
	    }
	    return false;
	}
};
