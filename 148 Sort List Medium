/*
Recursively split the original list into two halves. The split continues until there is only one node in the linked list (Divide phase). To split the list into two halves, we find the middle of the linked list using the Fast and Slow pointer approach as mentioned in Find Middle Of Linked List.

Recursively sort each sublist and combine it into a single sorted list. (Merge Phase). This is similar to the problem Merge two sorted linked lists
*/
148. Sort List
class Solution {
public:
    ListNode* sortList(ListNode* head) {
        // use merge sort to have O(nlogn) time and O(1) space 
		   // edge case: head , head->next ==null 
        // stop. 
        if (!head || !head->next)
            return head;
        ListNode* mid = getMid(head);
        ListNode* left = sortList(head);
        ListNode* right = sortList(mid);
        
        return merge(left, right);
    }
    
   
    ListNode* merge(ListNode* list1, ListNode* list2)
    {
        ListNode dummyHead(0); // just for temp head
        ListNode* ptr = &dummyHead; 
        while (list1 && list2) // when two list not empty
        {
            if (list1->val < list2->val) // list1 smaller
            {
                ptr->next = list1; // connect to list1 
                list1 = list1->next; // move on list 1
            } else 
            {
                ptr->next = list2; 
                list2 = list2->next; 
            }
            ptr = ptr->next; // loop until end l1 or l2
            
        }
        // merge remain list
        if (list1) ptr->next = list1; // connect to list1
        else ptr->next = list2; // connect to list2
        
        return dummyHead.next; // from next of dummyH
    }
    
    ListNode* getMid(ListNode* head) // and split into 2
    {
        ListNode* midPrev = nullptr; // prepare mid
        while(head && head->next) // not yet end node 
        {
            if (midPrev == nullptr) // start to run 
                midPrev = head; 
            else 
                midPrev = midPrev->next; // run slower. 
            head = head->next->next; // head run faster. 
        }
        // split into 2 list: 
        ListNode* mid = midPrev->next; // list from mid. 
        midPrev->next = nullptr; // list from head
        return mid; 
    }
    
};

/*
Approach 2: Bottom Up Merge Sort
First, the list is split into sublists of size 1 and merged iteratively in sorted order. 
The merged list is solved similarly.
use iterative --> then use only mid, tail, end, nextList to sort --> reduce memory. 

*/

class Solution {
public:
    ListNode* tail = new ListNode();
    ListNode* nextSubList = new ListNode();

    ListNode* sortList(ListNode* head) {
        if (!head || !head -> next)
            return head;
        int n = getCount(head);
        ListNode* start = head;
        ListNode dummyHead(0);
        for (int size = 1; size < n; size = size * 2) {
            tail = &dummyHead;
            while (start) {
                if (!start->next) {
                    tail->next = start;
                    break;
                }
                ListNode* mid = split(start, size);
                merge(start, mid);
                start = nextSubList;
            }
            start = dummyHead.next;
        }
        return dummyHead.next;
    }

    ListNode* split(ListNode* start, int size) {
        ListNode* midPrev = start;
        ListNode* end = start->next;
        //use fast and slow approach to find middle and end of second linked list
        for (int index = 1; index < size && (midPrev->next || end->next); index++) {
            if (end->next) {
                end = (end->next->next) ? end->next->next : end->next;
            }
            if (midPrev->next) {
                midPrev = midPrev->next;
            }
        }
        ListNode* mid = midPrev->next;
        nextSubList = end->next;
        midPrev->next = nullptr;
        end->next = nullptr;
        // return the start of second linked list
        return mid;
    }

    void merge(ListNode* list1, ListNode* list2) {
        ListNode dummyHead(0);
        ListNode* newTail = &dummyHead;
        while (list1 && list2) {
            if (list1->val < list2->val) {
                newTail->next = list1;
                list1 = list1->next;
                newTail = newTail->next;
            } else {
                newTail->next = list2;
                list2 = list2->next;
                newTail = newTail->next;
            }
        }
        newTail->next = (list1) ? list1 : list2;
        // traverse till the end of merged list to get the newTail
        while (newTail->next) {
            newTail = newTail->next;
        }
        // link the old tail with the head of merged list
        tail->next = dummyHead.next;
        // update the old tail with the new tail of merged list
        tail = newTail;
    }

    int getCount(ListNode* head) {
        int cnt = 0;
        ListNode* ptr = head;
        while (ptr) {
            ptr = ptr->next;
            cnt++;
        }
        return cnt;
    }
};
