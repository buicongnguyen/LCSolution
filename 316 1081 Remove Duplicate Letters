/*
Given a string s, remove duplicate letters so that every letter appears once and only once. You must make sure your result is the smallest in lexicographical order among all possible results.

Note: This question is the same as 1081: https://leetcode.com/problems/smallest-subsequence-of-distinct-characters/

Example 1:

Input: s = "bcabc"
Output: "abc"
Example 2:

Input: s = "cbacdcbc"
Output: "acdb"
 

Constraints:

1 <= s.length <= 104
s consists of lowercase English letters.
*/
/*

https://leetcode.com/problems/smallest-subsequence-of-distinct-characters/discuss/889467/C%2B%2B-faster-than-100-Map-based
Map based approach:
Things to remember while adding or removing a character in the final string (fi)
Add the character if it is not present in the string till now.
Remove if:

1. Their are more occurances of the same character ahead (Check using map)

2. Next character in string s (s[i]) is greater than the last character in final string.

3. s[i] is not present in the final string already.

string removeDuplicateLetters(string s) {
string fi;
unordered_map<char, int> m;
*/
string removeDuplicateLetters(string s) 
{
    string fi;
    unordered_map<char, int> m; // store char and index 

    for(int i=0;i<s.length();i++) // put to map all characters. 
        m[s[i]]++;

    if(fi.length()==m.size())    // no thing is repeated then just return the array fi // empty fi ... 
        return fi;

    for(int i=0;i<s.length();i++){  // scan string 

        while(fi.length()>0 && fi.back()>s[i]  // if fi added already, last character fi > s[i] 
              && m[fi.back()]>0                // still have other position later. 
              && fi.find(s[i])==-1)            // not yet added s[i] --> remove last fi. // 
            fi.pop_back();  // remove last. 


        if(fi.find(s[i])==-1)  // not yet have s[i] in fi.  
            fi.push_back(s[i]);  // put into array fi: s[i]  

        m[s[i]]--; // remove.  // done the s[i] --> remove from histogram. 
    }    
    return fi;
}
